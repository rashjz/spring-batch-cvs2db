<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/util
		http://www.springframework.org/schema/util/spring-util-3.2.xsd">

    <import resource="../config/context.xml"/>
    <import resource="../config/database.xml"/>
    <!--org.springframework.beans.factory.BeanCreationException: Could not autowire field:-->
    <bean class="org.springframework.batch.test.JobLauncherTestUtils"/>

    <bean id="report" class="rashjz.info.model.Report" scope="prototype"/>
    <bean id="itemProcessor" class="rashjz.info.job.ReportItemProcessor"/>

    <batch:job id="helloWorldJob">
        <batch:step id="step1">
            <batch:tasklet>
                <batch:chunk reader="cvsFileItemReader" writer="mysqlItemWriter" processor="itemProcessor"
                             commit-interval="1">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>

        <batch:step id="step2">
            <batch:tasklet>
                <batch:chunk reader="itemReader" writer="itemWriter" processor="itemProcessor" commit-interval="1">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>

    <bean id="cvsFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">

        <property name="resource" value="classpath:cvs/report.csv"/>

        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer">
                    <bean
                            class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <property name="names" value="id,name,surname,transaction,date"/>
                    </bean>
                </property>
                <property name="fieldSetMapper">
                    <bean class="rashjz.info.mapper.ReportFieldSetMapper"/>

                    <!-- if no data type conversion, use BeanWrapperFieldSetMapper to map by name
                    <bean
                        class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
                        <property name="prototypeBeanName" value="report" />
                    </bean>
                     -->
                </property>
            </bean>
        </property>

    </bean>


    <bean id="mysqlItemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
        <property name="dataSource" ref="dataSource"/>
        <property name="sql">
            <value>
                <![CDATA[
			insert into JOB_REPORT(id,name,surname,transaction,date) values (?, ?, ?, ?, ?)
			 ]]>
            </value>
        </property>
        <!-- It will take care matching between object property and sql name parameter -->
        <!--<property name="itemSqlParameterSourceProvider">-->
        <!--<bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider"/>-->
        <!--</property>-->
        <!-- We need a custom setter to handle the conversion between Jodatime LocalDate and MySQL DATE -->
        <property name="ItemPreparedStatementSetter">
            <bean class="rashjz.info.job.ReportItemPreparedStatementSetter"/>
        </property>
    </bean>

    <!--//mysql 2 xml-->
    <bean id="itemReader"
          class="org.springframework.batch.item.database.JdbcCursorItemReader"
          scope="step">
        <property name="dataSource" ref="dataSource"/>
        <property name="sql"
                  value="SELECT id,name,surname,transaction,date FROM JOB_REPORT"/>
        <property name="rowMapper">
            <bean class="rashjz.info.mapper.ReportRowMapper"/>
        </property>
    </bean>

    <bean id="itemWriter" class="org.springframework.batch.item.xml.StaxEventItemWriter">
        <property name="resource" value="classpath:xml/report.xml"/>
        <property name="rootTagName" value="reports"/>
        <property name="marshaller" ref="userUnmarshaller"/>
    </bean>

    <bean id="userUnmarshaller"
          class="org.springframework.oxm.xstream.XStreamMarshaller">
        <property name="aliases">
            <util:map id="aliases">
                <entry key="report" value="rashjz.info.model.Report"/>
            </util:map>
        </property>
    </bean>
</beans>